{"version":3,"file":"index.js","sources":["src/share.js","src/index.js","src/time.js"],"sourcesContent":["/**\n * @author tangyufeng\n * @email tangyufeng@szltech.com\n * @create date 2020-04-22 15:36:54\n * @modify date 2020-04-22 15:36:54\n * @desc 工具js\n */\n\n\n/**\n * 判断数据是否为空值['', undefined, null]\n * @author tangyufeng\n * @date 2019-10-24\n * @param {any} params 任何类型\n * @returns {boolean} 是否为空数据\n * @memberof Service\n */\nexport const isNoValue = params => {\n  const noValue = ['', undefined, null]\n  return noValue.includes(params)\n}\n\n/**\n * 字符转小写\n * @author tangyufeng\n * @date 2019-10-24\n * @param {String} params\n * @returns {String} 小写后的字符串\n * @memberof Service\n */\nexport const toLowerCase = params => {\n  if (!isString(params)) {\n    throw new Error(`${params} toLowerCase is no a String`)\n  }\n  return params.toLowerCase()\n}\n\n\n// 类型判断\nexport const isArray = value => getType(value) === 'array'\nexport const isPlainObj = value => getType(value) === 'object'\nexport const isString = value => getType(value) === 'string'\nexport const isNumber = value => getType(value) === 'number'\nexport const isBoolean = value => getType(value) === 'boolean'\nexport const isRegExp = value => getType(value) === 'regexp'\nexport const isError = value => getType(value) === 'error'\nexport const isDomexcEption = value => getType(value) === 'domexception'\nexport const isPlainNumber = value => isNumber(value) && !isNaN(value)\nexport const isNestType = value => isArray(value) || isPlainObj(value)\nexport const isNullObj = value => isPlainObj(value) && JSON.stringify(value) === '{}'\n\n/**\n * 通过Object的toString方法获取对象类型\n * @author tangyufeng\n * @date 2019-10-24\n * @param {*} obj\n * @returns \n */\nexport const getType = obj => {\n  return Object.prototype.toString.call(obj).replace(/\\[object|\\]|\\s/g, '').toLowerCase()\n}\n\n/**\n * 判断对象是不是plain obj 字符串\n * @author tangyufeng\n * @date 2020-04-18\n * @param {String} data\n * @returns \n */\nexport const isJsonStr = data => {\n  return isString(data) && data.startsWith('{') && data.endsWith('}')\n}\n\n/**\n * 获取时间戳\n * @author tangyufeng\n * @date 2020-04-22\n * @returns timestamp\n */\nexport const getTimeStamp = () => {\n  return `${new Date().getTime()}`\n}\n/**\n * 简单实现对象覆盖\n * @param  {Object} originObj 原对象\n * @param  {Object} targetObj 覆盖对象\n */\nexport const esayCover = (originObj, targetObj) => {\n  if (!isPlainObj(originObj) || !isPlainObj(targetObj)) {\n    throw new Error('esayCover函数的入参数仅接受plainObj')\n  }\n  return Object.keys(originObj).reduce((obj, key) => {\n    obj[key] = (isNoValue(targetObj[key]) && originObj[key]) || targetObj[key]\n    return obj\n  }, {})\n}\n\n\n/**\n * 是否为浏览器环境\n */\nexport const isBrowser = () => !isNoValue(window)","/**\n * @author tangyufeng\n * @email 542853503@qq.com\n * @create date 2020-05-25 14:35:51\n * @modify date 2020-07-04 09:37:47\n * @desc esay-storage\n */\n\nimport { getType, isJsonStr, isNoValue, esayCover, isDomexcEption, isString, isBrowser } from './share'\nimport * as DATE from './time'\n\n\n/*\n* 默认配置项\n*/\nlet CACHE_OPTION = {\n  // 是否为调试模式\n  DEBUG: false,\n  // 是否在存储的时候自动清除过期的数据空间\n  IS_AUTO_CLEAR: true,\n  // 超时时间\n  TIMEOUT: 10 * DATE.MIN,\n  // 默认的存储方式\n  DEFAULT_METHOD: 'localStorage',\n  // 存储方式, 只支持 localStorage, sessionStorage\n  LOCAL_METHODS_LIST: ['sessionStorage', 'localStorage'],\n  // 默认存储头\n  DEFAULT_PREFIX: '__EsayStorage__'\n}\n\n\n\n/**\n *\n * 格式化本地数据\n * @param {*} data\n * @returns 格式化完成的数据\n * @memberof System\n */\nconst formatSaveData = (data) => {\n  let type = getType(data)\n  if ([undefined, null].includes(data)) {\n    console.warn(`formatSaveData params is ${data}`)\n    return ''\n  }\n  if (type === 'string') {\n    return data\n  }\n  if (['object', 'array'].includes(type)) {\n    return JSON.stringify(data)\n  }\n  if (['number', 'boolean'].includes(type)) {\n    console.warn(`formatSaveData had handle ${data} is from ${type} to string, please check the type will you get this data form local`)\n    return data.toString()\n  }\n  return data\n}\n\n/**\n * 格式化键值\n * @param  {String} key 储存的key值\n */\nconst formatStorageKey = (key) => {\n  return `${CACHE_OPTION.DEFAULT_PREFIX}${key}`\n}\n\n/**\n * 清除已经过期的数据源\n * @param  {String} methods 检查的方法\n */\nconst clearOutTimeMemory = (methods) => {\n  if (!isString(methods)) {\n    throw new Error('clearOutTimeMemory params TypeError')\n  }\n  if (!CACHE_OPTION.LOCAL_METHODS_LIST.includes(methods)) {\n    throw new Error('EsayStorage no suppor this methods')\n  }\n  Object.keys(window[methods])\n    .filter(key => key.startsWith(CACHE_OPTION.DEFAULT_PREFIX))\n    .forEach(key => {\n      const originKey = key.replace(CACHE_OPTION.DEFAULT_PREFIX, '')\n      const isSurvival = checkDataSurvival(key, methods)\n      if (!isSurvival) {\n        if (CACHE_OPTION.DEBUG) {\n          console.log(`auto clear: ${originKey}`)\n        }\n        remove(originKey, methods)\n      }\n    })\n}\n\n/**\n *\n * 将数据存取在本地，并且设置超时\n * @param {String} key  存储的键值\n * @param {*} data 需要存储的数据\n * @param {Object} [option={timeout, methods}] 存取的配置\n */\nconst set = (key, data, handleOption = {}) => {\n  if (isNoValue(data)) {\n    console.warn(`set data must exist`)\n    return\n  }\n    const LOCAL_METHODS_LIST = CACHE_OPTION.LOCAL_METHODS_LIST\n    const defaultOption = {\n      timeout: CACHE_OPTION.TIMEOUT,\n      methods: CACHE_OPTION.DEFAULT_METHOD\n    }\n    const option = esayCover(defaultOption, handleOption)\n    if (!LOCAL_METHODS_LIST.includes(option.methods)) {\n      console.warn(`set no exist this ${option.methods}`)\n      return\n    }\n    if (getType(option.timeout) !== 'number') {\n      console.warn(`set option.timeout must be number`)\n      return\n    }\n    const formatData = formatSaveData(data)\n    const timestamp = new Date().getTime()\n    const cacheObj = {\n      originDataType: getType(data),\n      timeout: option.timeout,\n      timestamp: timestamp,\n      data: formatData\n    }\n  try{\n    window[option.methods].setItem(formatStorageKey(key), JSON.stringify(cacheObj))\n  } catch (error) {\n    if (!CACHE_OPTION.IS_AUTO_CLEAR) {\n      throw error\n    }\n    if (isDomexcEption(error)){\n      const message = error.message\n      const isOverCatch = message.includes('exceeded')\n      if (isOverCatch) {\n        clearOutTimeMemory(option.methods)\n        try{\n          window[option.methods].setItem(formatStorageKey(key), JSON.stringify(cacheObj))\n        } catch (errorAgain) {\n          throw errorAgain\n        }\n        return\n      }\n      throw error\n    }\n    throw error\n  }\n}\n\n/**\n *\n * 查看数据是否还存活\n * @param {String} key\n * @param  {} methods='localStorage'\n * @return {Boolean} 是否还有有效\n * @memberof System\n */\nconst checkDataSurvival = (key, methods) => {\n  try {\n    const LOCAL_METHODS_LIST = CACHE_OPTION.LOCAL_METHODS_LIST\n    methods = methods || CACHE_OPTION.methods\n    if (!LOCAL_METHODS_LIST.includes(methods)) {\n      console.warn(`EsayStorage no suppor this methods: ${methods}`)\n      return false\n    }\n    let data = window[methods].getItem(formatStorageKey(key))\n    if (!data) {\n      return false\n    }\n    if (isJsonStr(data)) {\n      let {\n        timeout,\n        timestamp\n      } = JSON.parse(data)\n      if (!timeout || !timestamp) {\n        return false\n      }\n      let nowDate = new Date().getTime()\n      return nowDate - timestamp < timeout\n    }\n    return false\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n *\n * 获取数据\n * @param {String} key 存储的key\n * @param {string}  methods='localStorage'\n * @returns\n */\nconst get = (key, methods) => {\n  try {\n    methods = methods || CACHE_OPTION.methods\n    let dataSurvival = checkDataSurvival(key, methods)\n    if (!dataSurvival) {\n      console.warn(`${key} no survival, please update local data`)\n      return undefined\n    }\n    let localData = window[methods].getItem(formatStorageKey(key))\n    let {\n      originDataType,\n      data\n    } = JSON.parse(localData)\n    if (originDataType === 'number') {\n      return Number(data)\n    }\n    if (['object', 'array'].includes(originDataType)) {\n      return JSON.parse(data)\n    }\n    if (originDataType === 'boolean') {\n      return data === 'true'\n    }\n    return data\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * 移除某项数据\n * @param  {String} key 储存的key\n * @param  {String} methods 储存的方法\n */\nconst remove = (key, methods) => {\n  methods = methods || CACHE_OPTION.DEFAULT_METHOD\n  window[methods].removeItem(formatStorageKey(key))\n}\n\n/**\n * 清除数据\n * @param  {String} methods 储存的方法\n */\nconst clear = (methods) => {\n  methods = methods || CACHE_OPTION.DEFAULT_METHOD\n  Object.keys(window[methods])\n  .filter(key => key.startsWith(CACHE_OPTION.DEFAULT_PREFIX))\n  .forEach(key => {\n    window[methods].removeItem(key)\n  })\n}\n\n\n/**\n * 构建函数\n * @param  {Object} config 全局初始化配置\n */\nconst EsayStorage = function (config = {}) {\n  if (!isBrowser) {\n    throw new Error('esay storage just suppor browser env.')\n  }\n  console.log(config)\n  // TODO: 检查运行环境， 目前只支持浏览器环境\n  CACHE_OPTION = esayCover(CACHE_OPTION, config)\n  if (CACHE_OPTION.DEBUG) {\n    console.log(CACHE_OPTION)\n  }\n}\n\n// 把基础的时间常量暴露除去\nEsayStorage.DATE = DATE\nEsayStorage.prototype = {\n  get,\n  set,\n  remove,\n  clear,\n  checkDataSurvival,\n  formatSaveData,\n  clearOutTimeMemory\n}\n\n\n\nexport default EsayStorage\n","/**\n * @author tangyufeng\n * @email tangyufeng@szltech.com\n * @create date 2020-07-04 09:38:25\n * @modify date 2020-07-04 09:38:25\n * @desc 时间相关常量\n */\n\nexport const SECUND = 1000\nexport const MIN = SECUND * 60\nexport const HOUR = MIN * 60\nexport const DAY = HOUR * 24\nexport const MONTH = DAY * 30\nexport const YEAR = DAY * 365"],"names":["isNoValue","undefined","includes","params","isPlainObj","getType","value","isString","esayCover","originObj","targetObj","Error","Object","keys","reduce","obj","key","formatSaveData","data","type","warn","JSON","stringify","formatStorageKey","CACHE_OPTION","DEFAULT_PREFIX","clearOutTimeMemory","methods","LOCAL_METHODS_LIST","window","filter","startsWith","forEach","originKey","replace","checkDataSurvival","DEBUG","log","EsayStorage","config","prototype","toString","call","toLowerCase","DAY","HOUR","SECUND","MIN","getItem","endsWith","parse","timeout","timestamp","Date","getTime","error","remove","DEFAULT_METHOD","removeItem","DATE","localData","originDataType","handleOption","option","TIMEOUT","formatData","cacheObj","setItem","IS_AUTO_CLEAR","isDomexcEption","message","errorAgain"],"mappings":"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"}